# JMS Protocol Handler .gitignore

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

# 构建产物 (排除但保留配置)
*.o
*.dSYM
*.app
*.ipa
*.dmg
*.pkg

# 保留镜像相关配置文件
!scripts/build/dmg-config.json
!scripts/build/build-images.sh
!docker/Dockerfile
!docker/docker-compose.yml
!docker/.dockerignore

# 临时镜像构建文件
temp_dmg/
temp-*.dmg
*.tmp

# Docker 相关
.dockerignore
docker-compose.override.yml

# 但保留 Docker 配置目录
!docker/

# Swift Package Manager
.build/
Packages/
Package.pins
Package.resolved
*.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/

# CocoaPods
Pods/
*.xcworkspace

# Carthage
Carthage/Build/

# 测试结果
test-results/
*.xcresult

# 日志文件
*.log

# 环境变量文件
.env
.env.local
.env.*.local

# IDE 文件
.vscode/
.idea/
*.swp
*.swo

# 备份文件
*~
*.bak
*.backup

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/#source-control

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# Project specific
#
# Compiled object files
*.o
*.obj

# Compiled dynamic libraries
*.so
*.dylib

# Compiled static libraries
*.a
*.lib

# Executables
*.exe
*.out
*.app

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf

# Build artifacts
build/objects/
build/temp/
build/artifacts/

# Test outputs
test_output/
test_results/

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# Log files
*.log

# IDE files
.vscode/
.idea/

# Distribution files (keep the final DMG)
# JMS-Protocol-Handler-Distribution/
# *.dmg

# But ignore temporary distribution files
dist/
temp_dist/

# Build configuration
build-paths.xcconfig
.build-config

# Custom build directories
build/xcode/
build/swift-build/
build/derived-data/
build/temp/
build/artifacts/

